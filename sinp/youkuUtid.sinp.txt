 /**
 * from:  apk
 * parse: utid
 * des: app端utid算法
 */

  private static String _calcHmac(byte[] paramArrayOfByte)
    throws Exception
  {
    Mac localMac = Mac.getInstance("HmacSHA1");
    localMac.init(new SecretKeySpec("d6fc3a4a06adbde89223bvefedc24fecde188aaa9161".getBytes(), localMac.getAlgorithm()));
    return Base64.encodeToString(localMac.doFinal(paramArrayOfByte), 2);
  }

  private final byte[] _generateUtdid()
    throws Exception
  {
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    int i = (int)(System.currentTimeMillis() / 1000L);
    int j = new Random().nextInt();
    Object localObject = IntUtils.getBytes(i);
    byte[] arrayOfByte = IntUtils.getBytes(j);
    localByteArrayOutputStream.write((byte[])localObject, 0, 4);
    localByteArrayOutputStream.write(arrayOfByte, 0, 4);
    localByteArrayOutputStream.write(3);
    localByteArrayOutputStream.write(0);
    try
    {
      localObject = PhoneInfoUtils.getImei(this.mContext);
      localByteArrayOutputStream.write(IntUtils.getBytes(StringUtils.hashCode((String)localObject)), 0, 4);
      localByteArrayOutputStream.write(IntUtils.getBytes(StringUtils.hashCode(_calcHmac(localByteArrayOutputStream.toByteArray()))));
      return localByteArrayOutputStream.toByteArray();
    }
    catch (Exception localException)
    {
      for (;;)
      {
        String str = "" + new Random().nextInt();
      }
    }
  }


  package com.ta.utdid2.android.utils;

public class IntUtils
{
  public static byte[] getBytes(int paramInt)
  {
    int i = (byte)(paramInt % 256);
    paramInt >>= 8;
    int j = (byte)(paramInt % 256);
    paramInt >>= 8;
    int k = (byte)(paramInt % 256);
    return new byte[] { (byte)((paramInt >> 8) % 256), k, j, i };
  }
  
  public static byte[] getBytes(byte[] paramArrayOfByte, int paramInt)
  {
    if (paramArrayOfByte.length == 4)
    {
      paramArrayOfByte[3] = ((byte)(paramInt % 256));
      paramInt >>= 8;
      paramArrayOfByte[2] = ((byte)(paramInt % 256));
      paramInt >>= 8;
      paramArrayOfByte[1] = ((byte)(paramInt % 256));
      paramArrayOfByte[0] = ((byte)((paramInt >> 8) % 256));
    }
    for (;;)
    {
      return paramArrayOfByte;
      paramArrayOfByte = null;
    }
  }
}
  
  public static int hashCode(String paramString)
  {
    int k = 0;
    int i = 0;
    int j = k;
    if (0 == 0)
    {
      j = k;
      if (paramString.length() > 0)
      {
        paramString = paramString.toCharArray();
        for (k = 0;; k++)
        {
          j = i;
          if (k >= paramString.length) {
            break;
          }
          i = i * 31 + paramString[k];
        }
      }
    }
    return j;
  }
